import discord
from discord.ext import commands
import re
import datetime
import asyncio
from collections import defaultdict, Counter
import requests
import os
from io import BytesIO
from PIL import Image, ImageSequence
import pytesseract

# === –í–∫–∞–∑—É—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —à–ª—è—Ö –¥–æ Tesseract ===
pytesseract.pytesseract.tesseract_cmd = r"C:\Users\user\AppData\Local\Programs\Tesseract-OCR\tesseract.exe"

# –¢–æ–∫–µ–Ω —Ç–≤–æ–≥–æ –±–æ—Ç–∞
TOKEN = "MTQxNDg5MjQ3NjU4NTQ4MDI3Nw.GZwaiM.XY0hubTfvb15U7O_Ejxt0Aon0owC9d7pm7I9LA"

intents = discord.Intents.default()
intents.message_content = True
intents.members = True
bot = commands.Bot(command_prefix="!", intents=intents)

# === –õ–æ–∫–∞–ª—å–Ω–∏–π —Ñ–∞–π–ª –∑—ñ —Å–ª–æ–≤–∞–º–∏ ===
LOCAL_SWEAR_FILE = "downloaded_swears.txt"

def load_local_swears():
    if os.path.exists(LOCAL_SWEAR_FILE):
        with open(LOCAL_SWEAR_FILE, "r", encoding="utf-8") as f:
            words = [line.strip().lower() for line in f if line.strip()]
        print(f"[LOCAL] –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(words)} —Å–ª—ñ–≤ —ñ–∑ {LOCAL_SWEAR_FILE}")
        return set(words)
    print("[LOCAL] –õ–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ ‚Äî –±—É–¥–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∑ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—É.")
    return set()

def save_local_swears(words):
    with open(LOCAL_SWEAR_FILE, "w", encoding="utf-8") as f:
        for w in sorted(words):
            f.write(w + "\n")
    print(f"[SAVE] –ó–±–µ—Ä–µ–∂–µ–Ω–æ {len(words)} —Å–ª—ñ–≤ —É {LOCAL_SWEAR_FILE}")

def load_swear_words_from_web(url):
    try:
        response = requests.get(url, timeout=10)
        if response.status_code == 200 and response.text.strip():
            words = [line.strip().lower() for line in response.text.splitlines() if line.strip()]
            return words
        else:
            print(f"[WARN] {url} ‚Äî —Å—Ç–∞—Ç—É—Å {response.status_code} –∞–±–æ –ø–æ—Ä–æ–∂–Ω—ñ–π –≤–º—ñ—Å—Ç.")
    except Exception as e:
        print(f"[ERROR] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –∑ {url}: {e}")
    return []

english_urls = [
    "https://raw.githubusercontent.com/coffee-and-fun/google-profanity-words/main/data/en.txt",
    "https://www.cs.cmu.edu/~biglou/resources/bad-words.txt",
    "https://raw.githubusercontent.com/zautumnz/profane-words/master/words.txt",
    "https://raw.githubusercontent.com/LDNOOBW/List-of-Dirty-Naughty-Obscene-and-Otherwise-Bad-Words/master/english.txt"
]

russian_urls = [
    "https://raw.githubusercontent.com/denexapp/russian-bad-words/master/words.txt",
    "https://raw.githubusercontent.com/LDNOOBW/List-of-Dirty-Naughty-Obscene-and-Otherwise-Bad-Words/master/russian.txt",
    "https://raw.githubusercontent.com/kaeyzar/russian-swear-words/master/words.txt",
    "https://raw.githubusercontent.com/ishandutta/udpipe-models/master/russian-swear-words.txt",
    "https://raw.githubusercontent.com/adzr/russian-bad-words/master/russian.txt"
]

ukrainian_urls = [
    "https://raw.githubusercontent.com/saganoren/obscene-ukr/master/obscene-ukr.txt",
    "https://raw.githubusercontent.com/LDNOOBW/List-of-Dirty-Naughty-Obscene-and-Otherwise-Bad-Words/master/ukrainian.txt",
    "https://raw.githubusercontent.com/ukrainian-swears/ukr-words/master/words.txt"
]

def load_all_swears():
    local_words = load_local_swears()
    if local_words:
        return local_words

    print("[INFO] –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –æ–Ω–ª–∞–π–Ω —Å–ª–æ–≤–Ω–∏–∫—ñ–≤...")
    english_set, russian_set, ukrainian_set = set(), set(), set()
    for url in english_urls:
        english_set.update(load_swear_words_from_web(url))
    for url in russian_urls:
        russian_set.update(load_swear_words_from_web(url))
    for url in ukrainian_urls:
        ukrainian_set.update(load_swear_words_from_web(url))

    all_words = english_set | russian_set | ukrainian_set
    print(f"[INFO] –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(all_words)} —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö —Å–ª—ñ–≤ –∑ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—É.")
    save_local_swears(all_words)
    return all_words

all_swear_words = load_all_swears()

warnings = {}
recent_messages = defaultdict(list)
mem_channel = "–º–µ–º—á–∏–∫–∏"

async def handle_violation(member, violation_type, reason, channel=None):
    if member.id not in warnings:
        warnings[member.id] = {"offense": 0, "spam": 0, "cringe": 0}
    warnings[member.id][violation_type] += 1
    count = warnings[member.id][violation_type]

    if count <= 3:
        warning_text = f"‚ö†Ô∏è –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è {count}/3 –∑–∞: {reason}"
        try:
            if channel:
                msg = await channel.send(f"{member.mention}, {warning_text}")
            else:
                msg = await member.send(warning_text)
            await asyncio.sleep(10)
            await msg.delete()
        except:
            print(f"[WARN] –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è {member}")
    else:
        duration = 600 if count == 4 else 1800
        until_time = datetime.datetime.now(datetime.timezone.utc) + datetime.timedelta(seconds=duration)
        try:
            await member.edit(timed_out_until=until_time, reason=reason)
            await member.send(f"–í–∞–º –¥–∞–Ω–æ —Ç–∞–π–º-–∞—É—Ç {duration} —Å–µ–∫—É–Ω–¥ –∑–∞: {reason}")
        except Exception as e:
            print(f"[ERROR] –ù–µ –≤–¥–∞–ª–æ—Å—è –¥–∞—Ç–∏ —Ç–∞–π–º-–∞—É—Ç {member}: {e}")

@bot.event
async def on_ready():
    print(f"‚úÖ –ë–æ—Ç {bot.user} –∑–∞–ø—É—â–µ–Ω–∏–π!")
    print(f"‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(all_swear_words)} —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö —Å–ª—ñ–≤.")

# === OCR –¥–ª—è –∑–æ–±—Ä–∞–∂–µ–Ω—å —ñ GIF ===
async def check_image_for_swears(message):
    for attachment in message.attachments:
        if attachment.filename.lower().endswith((".png", ".jpg", ".jpeg", ".gif", ".webp")):
            try:
                img_bytes = await attachment.read()
                img = Image.open(BytesIO(img_bytes))
                extracted_text = ""

                if attachment.filename.lower().endswith(".gif"):
                    for frame in ImageSequence.Iterator(img):
                        frame = frame.convert("RGB")
                        extracted_text += pytesseract.image_to_string(frame, lang="ukr+rus+eng").lower() + " "
                else:
                    extracted_text = pytesseract.image_to_string(img, lang="ukr+rus+eng").lower()

                if any(word in extracted_text for word in all_swear_words):
                    try:
                        await message.delete()
                    except:
                        print(f"[WARN] –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤—ñ–¥ {message.author}")
                    await handle_violation(message.author, "offense", "–ú–∞—Ç—é–∫–∏ –Ω–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—ñ", channel=message.channel)
                    return True
            except Exception as e:
                print(f"[ERROR] OCR –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∫–æ–Ω–∞—Ç–∏ –¥–ª—è {attachment.filename}: {e}")
    return False

@bot.event
async def on_message(message):
    if message.author == bot.user:
        return

    author = message.author
    channel_name = message.channel.name.lower()

    if message.attachments:
        if await check_image_for_swears(message):
            return
        await bot.process_commands(message)
        return

    if message.content:
        words_in_message = re.findall(r"[a-zA-Z–∞-—è–ê-–Ø“ë—î—ñ—ó'-]+", message.content.lower())
        if any(word in all_swear_words for word in words_in_message):
            try:
                await message.delete()
            except:
                print(f"[WARN] –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ {author}")
            await handle_violation(author, "offense", "–û—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è", channel=message.channel)
            return

        recent_messages[author.id].append(message.content.lower())
        if Counter(recent_messages[author.id])[message.content.lower()] >= 10:
            try:
                await message.delete()
            except:
                print(f"[WARN] –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ —Å–ø–∞–º –≤—ñ–¥ {author}")
            await handle_violation(author, "spam", "–°–ø–∞–º", channel=message.channel)
            recent_messages[author.id].clear()
            return

        if len(recent_messages[author.id]) > 20:
            recent_messages[author.id] = recent_messages[author.id][-20:]

        if "–º–µ–º" in message.content.lower() and channel_name != mem_channel.lower():
            try:
                await message.delete()
            except:
                print(f"[WARN] –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –º–µ–º-–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ {author}")
            await handle_violation(author, "cringe", "–ó–∞—Å–æ—Ä–µ–Ω–∏–µ —á–∞—Ç–∞", channel=message.channel)
            return

    await bot.process_commands(message)

# === –ö–æ–º–∞–Ω–¥–∏ ===
@bot.command()
async def –ø—Ä–∏–≤—ñ—Ç(ctx):
    await ctx.send("–ü—Ä–∏–≤—ñ—Ç! –Ø Discord –±–æ—Ç üòä")

@bot.command()
async def –±–æ—Ç(ctx):
    await ctx.send("—Ç–∞–∫ —â–æ?")

@bot.command()
@commands.has_permissions(administrator=True)
async def clear(ctx, amount: int):
    await ctx.channel.purge(limit=amount)
    await ctx.send(f"–í–∏–¥–∞–ª–µ–Ω–æ {amount} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å", delete_after=5)

@bot.command()
@commands.has_permissions(administrator=True)
async def –≤–∏–º–∫–Ω—É—Ç–∏(ctx):
    await ctx.send("–ë–æ—Ç –≤–∏–º–∏–∫–∞—î—Ç—å—Å—è...")
    await bot.close()

@bot.command()
@commands.has_permissions(administrator=True)
async def –æ–±–Ω–æ–≤–∏_—Å–ø–∏—Å–∫–∏(ctx):
    await ctx.send("üîÑ –û–Ω–æ–≤–ª—é—é —Å–ª–æ–≤–Ω–∏–∫–∏...")
    global all_swear_words
    all_swear_words = load_all_swears()
    await ctx.send(f"‚úÖ –ì–æ—Ç–æ–≤–æ! –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(all_swear_words)} —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö —Å–ª—ñ–≤.")

# === –ó–∞–ø—É—Å–∫ ===
bot.run(TOKEN)
